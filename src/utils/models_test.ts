import {
  getModelColumns,
  getModelRelations,
  extractRelationalRecord,
  createModel,
  createModels,
  normalizeModel,
  saveOriginalValue,
  getOriginalValue,
  mapRelationalResult,
  getTableName,
  getSaved,
  setSaved,
} from "../utils/models.ts";
import { Field, Relation, RelationType, FieldType } from "../models/fields.ts";
import { Model } from "../models/model.ts";
import { assertEquals, assert } from "../../testdeps.ts";
import { formatDate } from "./date.ts";

const toUser = () => User;
const toProduct = () => Product;

class User extends Model {
  @Field()
  email!: string;

  @Field()
  age!: number;

  @Relation(RelationType.HasMany, toProduct, "user_id")
  products!: Product[];
}

class Product extends Model {
  @Field()
  title!: string;

  @Relation(RelationType.BelongsTo, toUser, "user_id")
  user!: User;
}

Deno.test("getModelColumns", () => {
  assertEquals(getModelColumns(User), [{
    name: "id",
    propertyKey: "id",
    nullable: false,
    autoGenerated: true,
    select: true,
    isPrimaryKey: true,
    type: FieldType.Number,
  }, {
    propertyKey: "email",
    select: true,
    name: "email",
    type: FieldType.String,
    isPrimaryKey: false,
    isNullable: false,
  }, {
    propertyKey: "age",
    select: true,
    name: "age",
    type: FieldType.Number,
    isPrimaryKey: false,
    isNullable: false,
  }]);

  assertEquals(getModelColumns(Product), [{
    name: "id",
    propertyKey: "id",
    nullable: false,
    autoGenerated: true,
    select: true,
    isPrimaryKey: true,
    type: FieldType.Number,
  }, {
    propertyKey: "title",
    select: true,
    name: "title",
    type: FieldType.String,
    isPrimaryKey: false,
    isNullable: false,
  }]);
});

Deno.test("getModelRelations", () => {
  assertEquals(getModelRelations(User), [{
    propertyKey: "products",
    type: RelationType.HasMany,
    getModel: toProduct,
    targetColumn: "user_id",
  }]);

  assertEquals(getModelRelations(Product), [{
    propertyKey: "user",
    type: RelationType.BelongsTo,
    getModel: toUser,
    targetColumn: "user_id",
  }]);
});

Deno.test("extractRelationalRecord", () => {
  assertEquals(
    extractRelationalRecord({
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
      products__title: "Spoon",
      products__id: 2,
    }, "users"),
    {
      id: 1,
      email: "a@b.com",
      age: 16,
    },
  );

  assertEquals(
    extractRelationalRecord({
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
      products__title: "Spoon",
      products__id: 2,
    }, "products"),
    {
      id: 2,
      title: "Spoon",
    },
  );
});

Deno.test("createModel: should create a model from database", () => {
  const user = createModel(User, { id: 1, email: "a@b.com", age: 16 }, true);
  assert(user instanceof User);
  assertEquals(user.id, 1);
  assertEquals(user.email, "a@b.com");
  assertEquals(user.age, 16);
  assertEquals(user.products, []);
  assert(user.isSaved());

  const product = createModel(Product, { id: 2, title: "Spoon" }, true);
  assert(product instanceof Product);
  assertEquals(product.id, 2);
  assertEquals(product.title, "Spoon");
  assertEquals(product.user, null);
  assert(product.isSaved());
});

Deno.test("createModel: should create a model not from database", () => {
  const user = createModel(User, { email: "a@b.com", age: 16 });
  assert(user instanceof User);
  assertEquals(user.email, "a@b.com");
  assertEquals(user.age, 16);
  assertEquals(user.products, []);
  assertEquals(user.isSaved(), false);

  const product = createModel(Product, { title: "Spoon" });
  assert(product instanceof Product);
  assertEquals(product.title, "Spoon");
  assertEquals(product.user, null);
  assertEquals(product.isSaved(), false);
});

Deno.test("createModel: should create a model with relationship", () => {
  const user = createModel(User, {
    id: 1,
    email: "a@b.com",
    age: 16,
    products: [{
      id: 1,
      title: "Spoon",
    }, {
      id: 2,
      title: "Table",
    }],
  }, true);
  assert(user instanceof User);
  assertEquals(user.id, 1);
  assertEquals(user.email, "a@b.com");
  assertEquals(user.age, 16);
  assert(Array.isArray(user.products));
  assertEquals(user.products.length, 2);
  assertEquals(
    user.products.map((item) => item instanceof Product),
    [true, true],
  );
  assert(user.isSaved());

  const product = createModel(Product, {
    id: 2,
    title: "Spoon",
    user: {
      id: 1,
      email: "a@b.com",
      age: 16,
    },
  }, true);
  assert(product instanceof Product);
  assertEquals(product.id, 2);
  assertEquals(product.title, "Spoon");
  assert(product.user instanceof User);
  assertEquals(product.user.id, 1);
  assertEquals(product.user.email, "a@b.com");
  assertEquals(product.user.age, 16);
  assert(product.isSaved());
});

Deno.test("createModels: should create models not from database", () => {
  const users = createModels(User, [
    { id: 1, email: "a@b.com", age: 16 },
    { id: 2, email: "b@c.com", age: 17 },
  ]);
  assert(Array.isArray(users));
  assertEquals(users.length, 2);
  assertEquals(users.map((item) => item instanceof User), [true, true]);
  assertEquals(users.map((item) => item.isSaved()), [false, false]);
});

Deno.test("createModels: should create models from database", () => {
  const users = createModels(User, [
    { id: 1, email: "a@b.com", age: 16 },
    { id: 2, email: "b@c.com", age: 17 },
  ], true);
  assert(Array.isArray(users));
  assertEquals(users.length, 2);
  assertEquals(users.map((item) => item instanceof User), [true, true]);
  assertEquals(users.map((item) => item.isSaved()), [true, true]);
});

Deno.test("normalizeModel", () => {
  class Post extends Model {
    @Field()
    title!: string;

    @Field()
    likes!: number;

    @Field()
    is_published!: boolean;

    @Field()
    published_at!: Date;
  }

  const date = new Date();

  const post = new Post();
  post.title = 25 as any;
  post.likes = "16" as any;
  post.is_published = 1 as any;
  post.published_at = formatDate(date) as any;

  normalizeModel(post);

  assertEquals(post.title, "25");
  assertEquals(post.likes, 16);
  assertEquals(post.is_published, true);
  assertEquals(post.published_at, date);
});

Deno.test("saveOriginalValue and getOriginalValue", () => {
  const user = new User();
  user.email = "a@b.com";
  user.age = 16;
  assertEquals(getOriginalValue(user), undefined);
  saveOriginalValue(user);
  assertEquals(getOriginalValue(user), { email: "a@b.com", age: 16 });
});

Deno.test("mapRelationalResult", () => {
  assertEquals(
    mapRelationalResult(User, ["products"], [{
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
      products__title: "Spoon",
      products__id: 1,
    }, {
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
      products__title: "Rice",
      products__id: 2,
    }, {
      users__id: 2,
      users__email: "b@c.com",
      users__age: 17,
      products__title: "Table",
      products__id: 3,
    }, {
      users__id: 3,
      users__email: "c@d.com",
      users__age: 18,
      products__title: null,
      products__id: null,
    }]),
    [{
      id: 1,
      email: "a@b.com",
      age: 16,
      products: [
        { title: "Spoon", id: 1 },
        { title: "Rice", id: 2 },
      ],
    }, {
      id: 2,
      email: "b@c.com",
      age: 17,
      products: [
        { title: "Table", id: 3 },
      ],
    }, {
      id: 3,
      email: "c@d.com",
      age: 18,
      products: [],
    }],
  );

  assertEquals(
    mapRelationalResult(Product, ["user"], [{
      products__title: "Spoon",
      products__id: 1,
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
    }, {
      products__title: "Rice",
      products__id: 2,
      users__id: 1,
      users__email: "a@b.com",
      users__age: 16,
    }, {
      products__title: "Table",
      products__id: 3,
      users__id: null,
      users__email: null,
      users__age: null,
    }]),
    [{
      id: 1,
      title: "Spoon",
      user: { email: "a@b.com", age: 16, id: 1 },
    }, {
      id: 2,
      title: "Rice",
      user: { email: "a@b.com", age: 16, id: 1 },
    }, {
      id: 3,
      title: "Table",
      user: null,
    }],
  );
});

Deno.test("getTableName", () => {
  assertEquals(getTableName(User), "users");
  assertEquals(getTableName(Product), "products");
});

Deno.test("getSaved and setSaved", () => {
  const user = new User();
  assertEquals(getSaved(user), false);
  setSaved(user, true);
  assertEquals(getSaved(user), true);
  setSaved(user, false);
  assertEquals(getSaved(user), false);
});
